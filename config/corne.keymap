#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define SYSTEM 1
#define BLUETOOTH 2
#define APPS 3
#define SYMBOLS 4
#define NUMBERS 5
#define NUMPAD 6
#define F1_F12 7

// home row
#define HR1 LSHIFT
#define HR2 LCMD
#define HR3 RALT
#define HR4 LCTRL

#define PREV_TAB LG(LS(LBKT))
#define NEXT_TAB LG(LS(RBKT))

#define PREV_SPACE LC(LEFT)
#define NEXT_SPACE LC(RIGHT)

#define HY(X) LA(LC(LG(LS(X))))
#define EMOJI LC(LG(SPACE))


#define MAKE_TAP_SHIFT(name, tap, shift) \
    name: name { \
        compatible = "zmk,behavior-mod-morph"; \
        label = #name; \
        #binding-cells = <0>; \
        bindings = <&kp tap>, <&kp shift>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };


/ {
    macros {
        // hold to enable apps layer and left command at the same time
        apps_and_lcmd: apps_and_lcmd {
            label = "apps_and_lcmd";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &mo APPS &kp LCMD>
                , <&macro_pause_for_release>
                , <&macro_release &mo APPS &kp LCMD>
                ;
        };
    };

    behaviors {
        // https://zmk.dev/docs/behaviors/hold-tap#option-3-balanced
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        // `&lt` using `&apps_and_lcmd` and `&ts_spc_bs`
        // parameters are not used, so you can pass anything, e.g. 0 0
        MAKE_TAP_SHIFT(ts_spc_bs, SPACE, BACKSPACE)
        spc_bs_apps: spc_bs_apps {
            compatible = "zmk,behavior-hold-tap";
            label = "spc_bs_apps";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&apps_and_lcmd>, <&ts_spc_bs>;
        };

        // apps layer also holds down CMD, so I use a mod-morph to escape it
        prev_space: prev_space {
            compatible = "zmk,behavior-mod-morph";
            label = "prev_space";
            #binding-cells = <0>;
            bindings = <&kp PREV_SPACE>, <&kp PREV_SPACE>;
            mods = <(MOD_LGUI)>;
        };
        next_space: next_space {
            compatible = "zmk,behavior-mod-morph";
            label = "next_space";
            #binding-cells = <0>;
            bindings = <&kp NEXT_SPACE>, <&kp NEXT_SPACE>;
            mods = <(MOD_LGUI)>;
        };

        // tap, shift+tap, hold
        bs_del_shift: bs_del_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "bs_del_shift";
            #binding-cells = <0>;
            bindings = <&mt LSHIFT BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // alt+d = alt+x
        alt_d: alt_d {
            compatible = "zmk,behavior-mod-morph";
            label = "alt_d";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp RA(X)>;
            mods = <(MOD_RALT)>;
        };

        // interpunction
        MAKE_TAP_SHIFT(ts_dot, DOT, QUESTION)
        MAKE_TAP_SHIFT(ts_comma, COMMA, EXCLAMATION)
        MAKE_TAP_SHIFT(ts_colon, COLON, SEMICOLON)

        // brackets
        MAKE_TAP_SHIFT(ts_par, LPAR, RPAR)
        MAKE_TAP_SHIFT(ts_bkt, LBKT, RBKT)
        MAKE_TAP_SHIFT(ts_brc, LBRC, RBRC)
        MAKE_TAP_SHIFT(ts_lt, LT, GT)

        // other
        MAKE_TAP_SHIFT(ts_slash, SLASH, BACKSLASH)
    };

    keymap {
        compatible = "zmk,keymap";

        // Colemak narf (my own flavour of Colemak DH with affordances for Polish and Vim)
        // empty side columns (pretending it's a 3x5, not a 3x6 Corne)
        // home row mods (inspired by Miryoku)
        // layers on thumbs
        default_layer {
            bindings = <
&none &kp      Q &kp      F &kp      W &kp       P &kp B     &kp K &kp      L &kp      U &kp      Y &kp GRAVE  &none
&none &bhm HR4 A &bhm HR3 R &bhm HR2 S &bhm HR1  T &kp G     &kp M &bhm HR1 N &bhm HR2 E &bhm HR3 I &bhm HR4 O &none
&none &kp      X &kp      V &kp      C &kp       Z &alt_d    &kp J &kp      H &ts_dot    &ts_comma  &ts_colon  &none
                 &lt NUMBERS ESC &spc_bs_apps 0 0 &lt SYSTEM ENTER     &lt SYMBOLS TAB   &bs_del_shift &mt RALT SINGLE_QUOTE
            >;
        };

        system_layer {
            bindings = <
&trans &kp      LG(Q) &kp      LG(F) &kp      LG(W) &kp      LG(P) &kp    LG(B)     &kp LC(C_BRI_DEC) &kp LC(C_BRI_INC) &kp UP           &none      &none &none
&trans &bhm HR4 LG(A) &bhm HR3 LG(R) &bhm HR2 LG(S) &bhm HR1 LG(T) &kp LG(LS(T))    &caps_word        &kp LEFT          &kp DOWN         &kp RIGHT  &none &none
&trans &kp      LG(X) &kp      LG(V) &kp      LG(C) &kp      LG(Z) &kp LG(LS(Z))    &none             &kp C_PREV        &kp C_PLAY_PAUSE &kp C_NEXT &none &none
                                     &none          &mo BLUETOOTH  &none            &kp K_MUTE        &kp C_VOL_DN      &kp C_VOL_UP
            >;
        };

        bluetooth_layer {
            bindings = <
&none &none &none &none       &none &none    &none        &none        &none        &none        &none &none
&none &none &none &none       &none &none    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none &none
&none &none &none &none       &none &none    &none        &none        &none        &none        &none &none
                  &bootloader &none &none    &bt BT_CLR   &none        &bootloader
            >;
        };

        apps_layer {
            bindings = <
&none &kp HY(T) &kp PREV_TAB &kp NEXT_TAB &kp HY(A) &kp HY(B)     &kp HY(M) &prev_space  &kp HY(UP)   &next_space   &none     &none
&none &kp HY(C) &kp HY(D)    &kp HY(E)    &kp HY(F) &kp HY(G)     &kp HY(N) &kp HY(LEFT) &kp HY(DOWN) &kp HY(RIGHT) &none     &none
&none &kp HY(H) &kp HY(I)    &kp HY(J)    &kp HY(K) &kp HY(L)     &kp HY(O) &kp HY(P)    &kp HY(Q)    &kp HY(R)     &kp HY(S) &none
                             &kp GRAVE    &none     &kp TAB       &kp HY(X) &kp HY(Y)    &kp HY(Z)
            >;
        };

        symbols_layer {
            bindings = <
&none &kp PERCENT &kp AT   &kp HASH  &kp PIPE       &kp CARET       &none &none              &kp      LA(UP)   &none             &none   &none
&none &kp DOLLAR  &ts_brc  &ts_bkt   &ts_par        &ts_lt          &none &bhm HR1 LG(LBKT)  &bhm HR2 LA(DOWN) &bhm HR3 LG(RBKT) &kp HR4 &none
&none &kp AMPS    &kp PLUS &kp MINUS &ts_slash      &kp ASTERISK    &none &kp      LG(SLASH) &none             &none             &none   &none
                           &kp EMOJI &kp UNDERSCORE &kp EQUAL       &none &none              &none
            >;
        };

        numbers_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans    &kp PLUS     &kp N7 &kp N8 &kp N9 &none &none
&trans &trans &trans &trans &trans &trans    &kp MINUS    &kp N4 &kp N5 &kp N6 &none &none
&trans &trans &trans &trans &trans &trans    &kp SLASH    &kp N1 &kp N2 &kp N3 &none &none
  &trans &lt NUMPAD SPACE &lt F1_F12 EQUAL   &kp ASTERISK &kp N0 &kp DOT
            >;
        };

        numpad_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans    &trans &kp KP_N7 &kp KP_N8 &kp KP_N9 &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &kp KP_N4 &kp KP_N5 &kp KP_N6 &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &kp KP_N1 &kp KP_N2 &kp KP_N3 &trans &trans
                     &trans &trans &trans    &trans &kp KP_N0 &trans
            >;
        };

        f1_f12_layer {
            bindings = <
&none &none &none &none &none &none    &none &kp F7 &kp F8 &kp F9 &kp F12 &none
&none &none &none &none &none &none    &none &kp F4 &kp F5 &kp F6 &kp F11 &none
&none &none &none &none &none &none    &none &kp F1 &kp F2 &kp F3 &kp F10 &none
                  &none &none &none    &none &none &none
            >;
        };

        trans_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
                     &trans &trans &trans    &trans &trans &trans
            >;
        };

        none_layer {
            bindings = <
&none &none &none &none &none &none    &none &none &none &none &none &none
&none &none &none &none &none &none    &none &none &none &none &none &none
&none &none &none &none &none &none    &none &none &none &none &none &none
                  &none &none &none    &none &none &none
            >;
        };
    };
};
