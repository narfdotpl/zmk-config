#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MEDIA 1
#define HYPER 2
#define SYMBOLS 3
#define NUMBERS 4

#define PREV_TAB LG(LS(LBKT))
#define NEXT_TAB LG(LS(RBKT))

#define PREV_SPACE LC(LEFT)
#define NEXT_SPACE LC(RIGHT)

#define HY(X) LA(LC(LG(LS(X))))
#define EMOJI LC(LG(SPACE))


#define MAKE_TAP_SHIFT(name, tap, shift) \
    name: name { \
        compatible = "zmk,behavior-mod-morph"; \
        label = #name; \
        #binding-cells = <0>; \
        bindings = <&kp tap>, <&kp shift>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };


/ {
    macros {
        // hold to enable hyper layer and left command at the same time
        hyper_and_lcmd: hyper_and_lcmd {
            label = "hyper_and_lcmd";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &mo HYPER &kp LCMD>
                , <&macro_pause_for_release>
                , <&macro_release &mo HYPER &kp LCMD>
                ;
        };
    };

    behaviors {
        // https://zmk.dev/docs/behaviors/hold-tap#option-3-balanced
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        // `&lt` using `&hyper_and_lcmd`
        // first parameter is not used, so you can pass anything, e.g. 0
        lt_hyper: lt_hyper {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_hyper";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&hyper_and_lcmd>, <&kp>;
        };

        // hyper layer also holds down CMD, so I use a mod-morph to escape it
        prev_space: prev_space {
            compatible = "zmk,behavior-mod-morph";
            label = "prev_space";
            #binding-cells = <0>;
            bindings = <&kp PREV_SPACE>, <&kp PREV_SPACE>;
            mods = <(MOD_LGUI)>;
        };
        next_space: next_space {
            compatible = "zmk,behavior-mod-morph";
            label = "next_space";
            #binding-cells = <0>;
            bindings = <&kp NEXT_SPACE>, <&kp NEXT_SPACE>;
            mods = <(MOD_LGUI)>;
        };

        // interpunction
        MAKE_TAP_SHIFT(ts_dot, DOT, COMMA)
        MAKE_TAP_SHIFT(ts_colon, COLON, SEMICOLON)
        MAKE_TAP_SHIFT(ts_qm, QUESTION, EXCLAMATION)
    };

    keymap {
        compatible = "zmk,keymap";

        // Colemak narf (my own flavour of Colemak DH with affordances for Polish and Vim)
        // empty side columns (pretending it's a 3x5, not a 3x6 Corne)
        // home row mods (inspired by Miryoku)
        // layers on thumbs
        default_layer {
            bindings = <
&none &kp        Q &kp       F &kp       W &kp         P &kp B    &kp K &kp         L  &kp       U &kp       Y &kp  GRAVE   &none
&none &bhm LCTRL A &bhm RALT R &bhm LCMD S &bhm LSHIFT T &kp G    &kp M &bhm LSHIFT N  &bhm LCMD E &bhm RALT I &bhm LCTRL O &none
&none &kp        X &kp       V &kp       C &mt   LA(X) Z &kp D    &kp J &kp         H  &ts_dot     &ts_colon   &ts_qm       &none
             &lt NUMBERS TAB &lt_hyper 0 SPACE &lt MEDIA ESC    &lt SYMBOLS RET &lt_hyper 0 BSPC &kp APOS
            >;
        };

        media_layer {
            bindings = <
&trans &bootloader &trans    &trans    &trans    &trans           &kp C_BRI_DEC &kp C_BRI_INC &kp UP           &trans     &bootloader &trans
&trans &trans      &trans    &trans    &trans    &trans           &caps_word    &kp LEFT      &kp DOWN         &kp RIGHT  &trans      &trans
&trans &trans      &kp LG(V) &kp LG(C) &kp LG(Z) &kp LG(LS(Z))    &trans        &kp C_PREV    &kp C_PLAY_PAUSE &kp C_NEXT &trans      &trans
                             &trans    &trans    &trans           &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP
            >;
        };

        hyper_layer {
            bindings = <
&none &none     &kp PREV_TAB &kp NEXT_TAB &kp HY(A) &kp HY(B)     &kp HY(M) &prev_space  &kp HY(UP)   &next_space   &none     &none
&none &kp HY(C) &kp HY(D)    &kp HY(E)    &kp HY(F) &kp HY(G)     &kp HY(N) &kp HY(LEFT) &kp HY(DOWN) &kp HY(RIGHT) &none     &none
&none &kp HY(H) &kp HY(I)    &kp HY(J)    &kp HY(K) &kp HY(L)     &kp HY(O) &kp HY(P)    &kp HY(Q)    &kp HY(R)     &kp HY(S) &none
                             &none        &kp GRAVE &kp TAB       &kp HY(X) &kp HY(Y)    &kp HY(Z)
            >;
        };

        symbols_layer {
            bindings = <
&trans &trans &trans    &trans    &trans         &trans          &trans &trans &trans &trans &trans &trans
&trans &trans &kp LBRC  &kp LBKT  &kp LPAR       &trans          &trans &trans &trans &trans &trans &trans
&trans &trans &kp MINUS &kp PLUS  &kp SLASH      &kp ASTERISK    &trans &trans &trans &trans &trans &trans
                        &kp EMOJI &kp UNDERSCORE &kp EQUAL       &trans &trans &trans
            >;
        };

        numbers_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans    &trans &kp N7 &kp N8 &kp N9 &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &kp N4 &kp N5 &kp N6 &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &kp N1 &kp N2 &kp N3 &trans &trans
                     &trans &trans &trans    &trans &kp N0 &kp DOT
            >;
        };

        trans_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
                     &trans &trans &trans    &trans &trans &trans
            >;
        };
    };
};
